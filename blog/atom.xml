<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://docs.llm-chain.xyz/blog</id>
    <title>llm-chain Blog</title>
    <updated>2023-04-28T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://docs.llm-chain.xyz/blog"/>
    <subtitle>llm-chain Blog</subtitle>
    <icon>https://docs.llm-chain.xyz/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Announcement: LLM Chain Update 0.8.2]]></title>
        <id>https://docs.llm-chain.xyz/blog/2023/04/28/parsing-llm-input-with-llm-chain-0-8-2</id>
        <link href="https://docs.llm-chain.xyz/blog/2023/04/28/parsing-llm-input-with-llm-chain-0-8-2"/>
        <updated>2023-04-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are excited to announce the release of LLM Chain version 0.8.2! This update introduces some important improvements to our library, making it even more powerful and easy to use.]]></summary>
        <content type="html"><![CDATA[<p>We are excited to announce the release of LLM Chain version 0.8.2! This update introduces some important improvements to our library, making it even more powerful and easy to use.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-new-in-082">What's new in 0.8.2<a href="#whats-new-in-082" class="hash-link" aria-label="Direct link to What's new in 0.8.2" title="Direct link to What's new in 0.8.2">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-extract_labeled_text-function">New <code>extract_labeled_text</code> function<a href="#new-extract_labeled_text-function" class="hash-link" aria-label="Direct link to new-extract_labeled_text-function" title="Direct link to new-extract_labeled_text-function">​</a></h3><p>We've added a new function called <code>extract_labeled_text</code> in the parsing module. This function is designed to help you parse labeled text that is often generated by LLMs (Language Learning Machines). LLMs typically generate text like this:</p><div class="language-markdown codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-markdown codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token italic punctuation" style="color:#393A34">*</span><span class="token italic content">foo</span><span class="token italic punctuation" style="color:#393A34">*</span><span class="token plain">: bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> hello: world</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="improved-find_yaml-function">Improved find_yaml function<a href="#improved-find_yaml-function" class="hash-link" aria-label="Direct link to Improved find_yaml function" title="Direct link to Improved find_yaml function">​</a></h3><p>In this update, we have also improved the find_yaml function. It now returns the results in the order they appear in the document, making it more consistent and easier to work with.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started-with-082">Get started with 0.8.2<a href="#get-started-with-082" class="hash-link" aria-label="Direct link to Get started with 0.8.2" title="Direct link to Get started with 0.8.2">​</a></h2><p>To start using LLM Chain version 0.8.2, update your dependency in your Cargo.toml file:</p><div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">llm_chain = "0.8.2"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We hope you enjoy these new features and improvements! As always, if you have any questions or feedback, please feel free to reach out to our team.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing v0.8.1: Enhanced Prompt Macro and New Conversational Chain Type]]></title>
        <id>https://docs.llm-chain.xyz/blog/2023/04/27/index</id>
        <link href="https://docs.llm-chain.xyz/blog/2023/04/27/index"/>
        <updated>2023-04-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are excited to announce the release of version 0.8.1, which brings two major improvements to our Large Language Model (LLM) library: an enhanced prompt! macro and a new Conversational chain type. These updates make it even easier for developers to create rich and interactive applications powered by LLMs.]]></summary>
        <content type="html"><![CDATA[<p>We are excited to announce the release of version 0.8.1, which brings two major improvements to our Large Language Model (LLM) library: an enhanced <code>prompt!</code> macro and a new Conversational chain type. These updates make it even easier for developers to create rich and interactive applications powered by LLMs.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="enhanced-prompt-macro-with-prefixes">Enhanced Prompt Macro with Prefixes<a href="#enhanced-prompt-macro-with-prefixes" class="hash-link" aria-label="Direct link to Enhanced Prompt Macro with Prefixes" title="Direct link to Enhanced Prompt Macro with Prefixes">​</a></h2><p>The <code>prompt!</code> macro has been updated to support prefixes, making it more expressive and convenient to use. With this new feature, you can now create chat prompts by simply prefixing them with <code>user:</code>, <code>assistant:</code>, or <code>system:</code>. Here's an example of how to use the new syntax:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> user_prompt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">prompt!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Hello, Mr Bot, help me figure out what to do next"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> system_prompt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">prompt!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">system</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"You are a clever assistant that"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>By using these prefixes, you can create more complex and interactive prompts for various use cases, such as building chatbots, automating tasks, or generating text.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-conversational-chain-type">New Conversational Chain Type<a href="#new-conversational-chain-type" class="hash-link" aria-label="Direct link to New Conversational Chain Type" title="Direct link to New Conversational Chain Type">​</a></h2><p>We're also introducing the Conversational chain type, which enables you to have ongoing conversations with LLMs. Conversational chains manage the conversation history and context, ensuring that the LLM's responses remain relevant and coherent throughout the interaction. This new chain type is particularly useful for chatbot applications, multi-step interactions, and any scenario where context is essential.</p><p>Here's a quick example of a Conversational chain:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">llm_chain</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token namespace" style="opacity:0.7">chains</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">conversation</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Chain</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> executor</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">output</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Output</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parameters</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> prompt</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">step</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Step</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> tokio</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::main(flavor = </span><span class="token attribute attr-name string" style="color:#e3116c">"current_thread"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Box</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">dyn</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">error</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create a new ChatGPT executor.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> exec </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">executor!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create a new Chain with the executor.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> chain </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Chain</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">prompt!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">system</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"You are a robot assistant for making personalized greetings."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Define the conversation steps.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> step1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Step</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">for_prompt_template</span><span class="token punctuation" style="color:#393A34">(</span><span class="token macro property" style="color:#36acaa">prompt!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Make a personalized greeting for Joe."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> step2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Step</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">for_prompt_template</span><span class="token punctuation" style="color:#393A34">(</span><span class="token macro property" style="color:#36acaa">prompt!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Now, create a personalized greeting for Jane."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> step3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Step</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">for_prompt_template</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">prompt!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Finally, create a personalized greeting for Alice."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> step4 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Step</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">for_prompt_template</span><span class="token punctuation" style="color:#393A34">(</span><span class="token macro property" style="color:#36acaa">prompt!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Remind me who did we just greet."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Execute the conversation steps.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> res1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> chain</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send_message</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">step1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token macro property" style="color:#36acaa">parameters!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">exec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Step 1: {}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">primary_textual_output</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> res2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> chain</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send_message</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">step2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token macro property" style="color:#36acaa">parameters!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">exec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Step 2: {}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">primary_textual_output</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> res3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> chain</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send_message</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">step3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token macro property" style="color:#36acaa">parameters!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">exec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Step 3: {}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">primary_textual_output</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> res4 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> chain</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send_message</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">step4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token macro property" style="color:#36acaa">parameters!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">exec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Step 4: {}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res4</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">primary_textual_output</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>With the Conversational chain, you can now easily send multiple messages and manage the conversation context without having to worry about manual context management.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrade-today">Upgrade Today<a href="#upgrade-today" class="hash-link" aria-label="Direct link to Upgrade Today" title="Direct link to Upgrade Today">​</a></h2><p>We encourage you to upgrade to version 0.8.1 and take advantage of these new features. The enhanced <code>prompt!</code> macro and the new Conversational chain type will make your LLM-powered applications even more interactive and engaging.</p><p>As always, we appreciate your feedback and suggestions. Feel free to reach out to our team for any questions or concerns. Happy coding!</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing LLM-chain v0.8.0 - Expanding the prompt system]]></title>
        <id>https://docs.llm-chain.xyz/blog/introducing-llm-chain-v080</id>
        <link href="https://docs.llm-chain.xyz/blog/introducing-llm-chain-v080"/>
        <updated>2023-04-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We're excited to announce the release of llm-chain v0.8.0, a significant update to our LLM library. This release introduces a host of improvements and new features, including a completely revamped Prompt system and more streamlined handling of Parameters. Let's dive into the details!]]></summary>
        <content type="html"><![CDATA[<p>We're excited to announce the release of llm-chain v0.8.0, a significant update to our LLM library. This release introduces a host of improvements and new features, including a completely revamped Prompt system and more streamlined handling of Parameters. Let's dive into the details!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="revamped-prompt-system">Revamped Prompt System<a href="#revamped-prompt-system" class="hash-link" aria-label="Direct link to Revamped Prompt System" title="Direct link to Revamped Prompt System">​</a></h2><p>Our new Prompt system has been redesigned from the ground up to provide greater flexibility and efficiency in working with language models. In llm-chain v0.8.0, we've introduced new structs and enums to better represent chat messages and their roles, such as ChatMessage, ChatMessageCollection, and ChatRole. The Data enum has also been introduced to represent either a collection of chat messages or a single text, making it easier to work with different types of data.</p><p>Furthermore, we've created a more powerful PromptTemplate system that allows you to format prompts with a set of parameters. This enables you to dynamically generate prompts for your language models without the need for cumbersome string manipulation.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="executors-no-longer-handle-parameters">Executors No Longer Handle Parameters<a href="#executors-no-longer-handle-parameters" class="hash-link" aria-label="Direct link to Executors No Longer Handle Parameters" title="Direct link to Executors No Longer Handle Parameters">​</a></h2><p>With the release of llm-chain v0.8.0, we've shifted the responsibility of handling Parameters from the executors to the main llm-chain crate. This change simplifies the process of working with executors, allowing developers to focus more on the core functionality of their language models.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next?<a href="#whats-next" class="hash-link" aria-label="Direct link to What's Next?" title="Direct link to What's Next?">​</a></h2><p>This release marks a significant step forward in the evolution. However, we're not stopping here! We'll continue to refine and expand the capabilities of llm-chain, making it even more powerful and user-friendly.</p><p>We encourage you to check out llm-chain v0.8.0 and experience the benefits of the improved Prompt system and streamlined handling of Parameters. As always, we appreciate your feedback and contributions to help make llm-chain the best language model library out there.</p><p>Upgrade to llm-chain v0.8.0 today and take your language models to the next level!</p>]]></content>
        <author>
            <name>will rudenmalm</name>
            <uri>https://github.com/williamhogman</uri>
        </author>
        <category label="llm-chain" term="llm-chain"/>
        <category label="update" term="update"/>
        <category label="large language models" term="large language models"/>
        <category label="rust" term="rust"/>
        <category label="tera" term="tera"/>
        <category label="templating" term="templating"/>
        <category label="prompt system" term="prompt system"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing LLM-chain v0.6.0: Powerful Templating and Improved Prompt System]]></title>
        <id>https://docs.llm-chain.xyz/blog/introducing-llm-chain-v060</id>
        <link href="https://docs.llm-chain.xyz/blog/introducing-llm-chain-v060"/>
        <updated>2023-04-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are thrilled to announce the release of llm-chain v0.6.0, which introduces significant enhancements to our library. This update focuses on making the llm-chain more robust and versatile, allowing developers to build even more advanced applications with ease.]]></summary>
        <content type="html"><![CDATA[<p>We are thrilled to announce the release of llm-chain v0.6.0, which introduces significant enhancements to our library. This update focuses on making the llm-chain more robust and versatile, allowing developers to build even more advanced applications with ease.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="major-updates">Major updates<a href="#major-updates" class="hash-link" aria-label="Direct link to Major updates" title="Direct link to Major updates">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-the-switch-to-the-tera-template-language">1. The switch to the <code>tera</code> template language<a href="#1-the-switch-to-the-tera-template-language" class="hash-link" aria-label="Direct link to 1-the-switch-to-the-tera-template-language" title="Direct link to 1-the-switch-to-the-tera-template-language">​</a></h4><p>One of the most significant changes in this release is the introduction of the <code>tera</code> template language. This powerful and flexible templating system enables developers to create dynamic and complex templates for their projects. The <code>tera</code> language allows for more advanced control structures and filters, making it a substantial upgrade from the previous templating system.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-improved-prompt-system">2. Improved prompt system<a href="#2-improved-prompt-system" class="hash-link" aria-label="Direct link to 2. Improved prompt system" title="Direct link to 2. Improved prompt system">​</a></h4><p>Another notable update is the revamped prompt system. With llm-chain v0.6.0, the prompt system now supports both Chat and completion-style models. This improvement means developers no longer need to worry about whether they are using a completion or chat model when crafting prompts. This unified approach simplifies the development process and makes it easier to work with various types of language models.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-updated-llamacpp">3. Updated LLaMA.cpp<a href="#3-updated-llamacpp" class="hash-link" aria-label="Direct link to 3. Updated LLaMA.cpp" title="Direct link to 3. Updated LLaMA.cpp">​</a></h4><p>The latest version of LLaMA.cpp has been integrated into this release, ensuring better performance and stability for your projects.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-improvements">Other improvements<a href="#other-improvements" class="hash-link" aria-label="Direct link to Other improvements" title="Direct link to Other improvements">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-safer-error-handling">1. Safer error handling<a href="#1-safer-error-handling" class="hash-link" aria-label="Direct link to 1. Safer error handling" title="Direct link to 1. Safer error handling">​</a></h4><p>In addition to the major updates, llm-chain v0.6.0 also brings improvements to error handling. Templates now return <code>Result</code> rather than panicking on errors, making it more convenient to handle any issues that may arise during development. Similarly, Executors also return <code>Result</code> instead of panicking on errors, providing a more consistent and safer API.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="time-to-move-on-from-the-old-templating-system">Time to move on from the old templating system<a href="#time-to-move-on-from-the-old-templating-system" class="hash-link" aria-label="Direct link to Time to move on from the old templating system" title="Direct link to Time to move on from the old templating system">​</a></h3><p>With the introduction of the <code>tera</code> template language, we strongly recommend moving away from the old templating system. This update provides a solid foundation for building even more advanced applications using the llm-chain library.</p><p>We hope you're as excited about these enhancements as we are! As always, we appreciate your feedback and support. If you have any questions or need help, please don't hesitate to reach out on <a href="https://discord.gg/kewN9Gtjt2" target="_blank" rel="noopener noreferrer">Discord</a> !</p><p>Happy coding! 🚀</p>]]></content>
        <author>
            <name>will rudenmalm</name>
            <uri>https://github.com/williamhogman</uri>
        </author>
        <category label="llm-chain" term="llm-chain"/>
        <category label="update" term="update"/>
        <category label="large language models" term="large language models"/>
        <category label="rust" term="rust"/>
        <category label="tera" term="tera"/>
        <category label="templating" term="templating"/>
        <category label="prompt system" term="prompt system"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using ChatGPT in Rust with llm-chain]]></title>
        <id>https://docs.llm-chain.xyz/blog/using-chatgpt-in-rust</id>
        <link href="https://docs.llm-chain.xyz/blog/using-chatgpt-in-rust"/>
        <updated>2023-04-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this blog post, we'll explore how to use ChatGPT in Rust with the help of the llm-chain library. We will walk through a simple example that demonstrates how to generate responses using OpenAI's ChatGPT model.]]></summary>
        <content type="html"><![CDATA[<p>In this blog post, we'll explore how to use ChatGPT in Rust with the help of the <code>llm-chain</code> library. We will walk through a simple example that demonstrates how to generate responses using OpenAI's ChatGPT model.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started">Getting Started<a href="#getting-started" class="hash-link" aria-label="Direct link to Getting Started" title="Direct link to Getting Started">​</a></h2><p>First, let's start by installing the necessary packages using <code>cargo add</code>. You will need the <code>llm-chain</code> and <code>llm-chain-openai</code> libraries:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cargo add llm-chain llm-chain-openai</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, let's dive into the code:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">llm_chain</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token namespace" style="opacity:0.7">traits</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">StepExt</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Parameters</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">llm_chain_openai</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">chatgpt</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">Executor</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Model</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Role</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Step</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::main(flavor = </span><span class="token attribute attr-name string" style="color:#e3116c">"current_thread"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> exec </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Executor</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new_default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> chain </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Step</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Model</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">ChatGPT3_5Turbo</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token class-name">Role</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">"You are a helpful assistant"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Role</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Tell me about the Rust programming language"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_chain</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> chain</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Parameters</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">exec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"{:?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In the code snippet above, we begin by importing the necessary modules and functions from the <code>llm-chain</code> and <code>llm-chain-openai</code> libraries. We then define a simple <code>main</code> function that uses the <code>Executor</code> and <code>Step</code> structs to create a conversational chain.</p><p>The <code>Model::ChatGPT3_5Turbo</code> model is used as the language model in this example. We also define two steps in the conversation: the first one sets the role of the assistant and the second one asks a question about the Rust programming language.</p><p>Finally, we execute the conversation chain using the <code>run</code> method and print the generated response.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping Up<a href="#wrapping-up" class="hash-link" aria-label="Direct link to Wrapping Up" title="Direct link to Wrapping Up">​</a></h2><p>As you can see, using ChatGPT in Rust with <code>llm-chain</code> is a straightforward and efficient process. The library makes it easy to build and manage conversational agents in Rust, allowing developers to focus on creating more powerful and interactive applications.</p><p>To continue learning about ChatGPT in Rust and how to make the most of the <code>llm-chain</code> library, try our <a href="https://chat.openai.com/docs/getting-started-tutorial/index" target="_blank" rel="noopener noreferrer">tutorial</a> .</p>]]></content>
        <author>
            <name>will rudenmalm</name>
            <uri>https://github.com/williamhogman</uri>
        </author>
        <category label="llm-chain" term="llm-chain"/>
        <category label="introduction" term="introduction"/>
        <category label="chatgpt" term="chatgpt"/>
        <category label="rust" term="rust"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unleashing the Power of Large Language Models with LLM-chain]]></title>
        <id>https://docs.llm-chain.xyz/blog/introducing-llm-chain</id>
        <link href="https://docs.llm-chain.xyz/blog/introducing-llm-chain"/>
        <updated>2023-04-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We're excited to announce the release of LLM-chain, a Rust library designed to help developers work with Large Language Models (LLMs) more effectively. Our primary focus is on providing robust support for prompt templates and chaining together prompts in multi-step chains, enabling complex tasks that LLMs can't handle in a single step. This includes, but is not limited to, summarizing lengthy texts or performing advanced data processing tasks.]]></summary>
        <content type="html"><![CDATA[<p>We're excited to announce the release of LLM-chain, a Rust library designed to help developers work with Large Language Models (LLMs) more effectively. Our primary focus is on providing robust support for prompt templates and chaining together prompts in multi-step chains, enabling complex tasks that LLMs can't handle in a single step. This includes, but is not limited to, summarizing lengthy texts or performing advanced data processing tasks.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="features-of-llm-chain">Features of LLM-chain<a href="#features-of-llm-chain" class="hash-link" aria-label="Direct link to Features of LLM-chain" title="Direct link to Features of LLM-chain">​</a></h2><p>LLM-chain comes with a variety of features that make it easier to work with LLMs, including:</p><ul><li><strong>Prompt templates</strong>: Create reusable and easily customizable prompt templates for consistent and structured interactions with LLMs.</li><li><strong>Chains</strong>: Build powerful chains of prompts that allow you to execute more complex tasks, step by step, leveraging the full potential of LLMs.</li><li><strong>ChatGPT support</strong>: Currently supports ChatGPT models, with plans to add support for more LLMs in the future, such as LLaMa and Stanford's Alpaca models.</li><li><strong>Tools</strong>: Enhance your AI agents' capabilities by giving them access to various tools, such as running Bash commands, executing Python scripts, or performing web searches, enabling more complex and powerful interactions.</li><li><strong>Extensibility</strong>: Designed with extensibility in mind, making it easy to integrate additional LLMs as the ecosystem grows and new models are developed.</li><li><strong>Community-driven</strong>: We welcome and encourage contributions from the community to help improve and expand the capabilities of LLM-chain.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="connect-with-us">Connect with Us<a href="#connect-with-us" class="hash-link" aria-label="Direct link to Connect with Us" title="Direct link to Connect with Us">​</a></h2><p>If you have any questions, suggestions, or feedback, feel free to join our <a href="https://discord.gg/kewN9Gtjt2" target="_blank" rel="noopener noreferrer">Discord community</a>. We're always excited to hear from our users and learn about your experiences with LLM-chain.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-with-llm-chain">Getting Started with LLM-chain<a href="#getting-started-with-llm-chain" class="hash-link" aria-label="Direct link to Getting Started with LLM-chain" title="Direct link to Getting Started with LLM-chain">​</a></h2><p>Check out our <a href="https://github.com/sobelio/llm-chain" target="_blank" rel="noopener noreferrer">Github repository</a> or the <a href="https://docs.rs/llm-chain" target="_blank" rel="noopener noreferrer">documentation</a> to get started.</p>]]></content>
        <author>
            <name>will rudenmalm</name>
            <uri>https://github.com/williamhogman</uri>
        </author>
        <category label="llm-chain" term="llm-chain"/>
        <category label="introduction" term="introduction"/>
        <category label="large language models" term="large language models"/>
        <category label="rust" term="rust"/>
    </entry>
</feed>